generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           String          @id @default(cuid())
  name         String          @unique
  description  String?
  defaultImage String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  order        Int             @default(0)
  resources    Resource[]
  orders       ResourceOrder[]
}

model Resource {
  id             String              @id @default(cuid())
  title          String
  description    String
  url            String
  additionalUrls String[]
  previewImage   String?
  categoryId     String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  contentType    ContentType         @default(Training)
  completions    CompletedResource[]
  category       Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orders         ResourceOrder[]     @relation("ResourceOrders")
  completedBy    User[]              @relation("UserCompleted")
  favoritedBy    User[]              @relation("UserFavorites")
}

model User {
  id                 String              @id @default(cuid())
  email              String              @unique
  name               String?
  image              String?
  emailVerified      DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  isAdmin            Boolean             @default(false)
  lastLogin          DateTime?
  accounts           Account[]
  completedResources CompletedResource[]
  resourceOrders     ResourceOrder[]
  sessions           Session[]
  completed          Resource[]          @relation("UserCompleted")
  favorites          Resource[]          @relation("UserFavorites")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ResourceOrder {
  id         String   @id @default(cuid())
  userId     String
  resourceId String
  categoryId String
  order      Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  resource   Resource @relation("ResourceOrders", fields: [resourceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@index([userId, categoryId])
}

model CompletedResource {
  id          String   @id @default(cuid())
  userId      String
  resourceId  String
  completedAt DateTime @default(now())
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
}

model Settings {
  id                Int      @id @default(1)
  siteName          String?
  defaultCategoryId String?
  notificationEmail String?
  emailEnabled      Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum ContentType {
  Resource
  Training
  Shortcut
}
