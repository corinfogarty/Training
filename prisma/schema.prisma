datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  defaultImage String?
  order       Int        @default(0)
  resources   Resource[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  orders      ResourceOrder[]
}

model Resource {
  id          String       @id @default(cuid())
  title       String
  description String
  url         String
  additionalUrls String[]
  contentType  ContentType @default(Training)
  previewImage String?
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  favoritedBy User[]       @relation("UserFavorites")
  completedBy User[]       @relation("UserCompleted")
  orders      ResourceOrder[] @relation("ResourceOrders")
  completions CompletedResource[]
}

enum ContentType {
  Resource
  Training
  Shortcut
}

model User {
  id            String     @id @default(cuid())
  email         String     @unique
  name          String?
  image         String?
  emailVerified DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  isAdmin       Boolean    @default(false)
  favorites     Resource[] @relation("UserFavorites")
  completed     Resource[] @relation("UserCompleted")
  accounts      Account[]
  sessions      Session[]
  resourceOrders ResourceOrder[]
  lastLogin     DateTime?
  completedResources CompletedResource[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ResourceOrder {
  id         String   @id @default(cuid())
  userId     String
  resourceId String
  categoryId String
  order      Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource   Resource @relation("ResourceOrders", fields: [resourceId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@index([userId, categoryId])
}

model CompletedResource {
  id          String   @id @default(cuid())
  userId      String
  resourceId  String
  completedAt DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
}

model Settings {
  id                Int      @id @default(1)
  siteName          String?
  defaultCategoryId String?
  notificationEmail String?
  emailEnabled      Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
